{"changed":true,"filter":false,"title":"AnalizadorAccesosAServidor.java","tooltip":"/weblog-analyzer-2016-v2/AnalizadorAccesosAServidor.java","value":"import java.io.File;\nimport java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class AnalizadorAccesosAServidor\n{\n    private static final int CODIGO_EXITOSO = 200;\n    private ArrayList<Acceso> accesos;\n    \n    \n    public AnalizadorAccesosAServidor() \n    {\n        accesos = new ArrayList<>();\n    }\n    \n    \n    public void analizarArchivoDeLog(String archivo)\n    {\n        accesos.clear();\n        File archivoALeer = new File(archivo);\n        try {\n            Scanner sc = new Scanner(archivoALeer);\n            while (sc.hasNextLine()) {\n                String lineaLeida = sc.nextLine();               \n                Acceso accesoActual = new Acceso(lineaLeida);              \n                accesos.add(accesoActual);\n            }\n            sc.close();\n        }\n        catch (Exception e) {\n            System.out.println(\"Ocurrio algun error al leer el archivo.\");\n        }\n    }\n    \n    \n    public int obtenerHoraMasAccesos() \n    {\n        int valorADevolver = -1;\n        \n        if (!accesos.isEmpty()) {\n            int[] accesosPorHora = new int[24];\n    \n            for (Acceso accesoActual : accesos) {\n                int horaAccesoActual = accesoActual.getHora();\n                accesosPorHora[horaAccesoActual] = accesosPorHora[horaAccesoActual] + 1;\n            }\n            \n            int numeroDeAccesosMasAlto = accesosPorHora[0];\n            int horaDeAccesosMasAlto = 0;\n            for (int i = 0; i < accesosPorHora.length; i++) {\n                if (accesosPorHora[i] >= numeroDeAccesosMasAlto) {\n                    numeroDeAccesosMasAlto = accesosPorHora[i];\n                    horaDeAccesosMasAlto = i;\n                }\n            }\n            \n            valorADevolver = horaDeAccesosMasAlto;                      \n        }\n        \n        return valorADevolver;\n    }\n\n    \n    \n    public String paginaWebMasSolicitada() \n    {\n        String webMasSolicitada = null;\n        \n        int maxNumAccesosHastaAhora = 0;\n        \n        for (Acceso acceso : accesos) {\n            \n            String urlActual = acceso.getPaginaWeb();\n            int contadorAccesosUrlActual = 0;\n            \n            for(Acceso accesoBucleInterno : accesos) {\n                if (urlActual.equals(accesoBucleInterno.getPaginaWeb())){\n                    contadorAccesosUrlActual++;\n                }\n\n            }\n            \n            if(contadorAccesosUrlActual >= maxNumAccesosHastaAhora){\n                webMasSolicitada = urlActual;\n                maxNumAccesosHastaAhora = contadorAccesosUrlActual;\n            }\n        }\n        \n        if(webMasSolicitada == null) {\n            System.out.println(\"No hay datos de acceso.\");\n        }\n        return webMasSolicitada;\n    }\n    \n    public String clienteConMasAccesosExitosos()\n    {\n        String ipClienteMasAccesosExitosos = null;\n        HashMap<String, Integer> mapa = new HashMap<>(); \n        \n        for(Acceso acceso : accesos) {\n            if(acceso.getCodigo() == CODIGO_EXITOSO) {\n                String ipAccesoActual = acceso.getDireccionIp();\n                \n                Integer valorAsociadoALaKey = mapa.get(ipAccesoActual);\n                if(valorAsociadoALaKey == null){\n                    //La ip no estaba en el mapa aun: la metemos asociada a un 1\n                    mapa.put(ipAccesoActual,1);\n                }\n                else {\n                    //Ya estaba en el mapa: incrementamos el valor asociado de accesos\n                    mapa.put(ipAccesoActual,mapa.get(ipAccesoActual)+1);\n                }\n            }\n        }\n        \n        int maximoAccesosHastaElMomento = 0;\n        \n        \n        for (String ipActual : mapa.keySet()) {\n            if ((mapa.get(ipActual) > maximoAccesosHastaElMomento) || \n            ((mapa.get(ipActual) == maximoAccesosHastaElMomento) && (esMasAltaLaPrimeraIp(ipActual, ipClienteMasAccesosExitosos)))) {\n                maximoAccesosHastaElMomento = mapa.get(ipActual);\n                ipClienteMasAccesosExitosos = ipActual;\n            }\n        } \n        \n        return ipClienteMasAccesosExitosos;\n    }\n    \n    \n    private boolean esMasAltaLaPrimeraIp(String ipPrimera, String ipSegunda) \n    {\n        boolean esMasAltaLaPrimera = false;\n        \n        if (ipSegunda == null) {\n            esMasAltaLaPrimera = true;\n        }\n        else {\n        \n            String[] octetosIP1 = ipPrimera.split(\"\\\\.\");\n            String[] octetosIP2 = ipSegunda.split(\"\\\\.\");\n        \n    \n            int indiceOctetoActual = 0;\n            boolean yaTengoUnaConclusion = false;\n            while(indiceOctetoActual < 4 && !yaTengoUnaConclusion) {\n                \n                int octetoIP1Actual = Integer.parseInt(octetosIP1[indiceOctetoActual]);\n                int octetoIP2Actual = Integer.parseInt(octetosIP2[indiceOctetoActual]);\n                \n                if (octetoIP1Actual > octetoIP2Actual) {\n                    esMasAltaLaPrimera = true;\n                    yaTengoUnaConclusion = true;\n                }\n                else if (octetoIP1Actual < octetoIP2Actual) {\n                    yaTengoUnaConclusion = true;\n                }\n                \n                indiceOctetoActual += 1;\n            }\n        }\n        \n\n        return esMasAltaLaPrimera;\n    }\n    \n    \n    \n    \n    \n\n\n}\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":8,"column":38},"end":{"row":8,"column":38},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1520422730000}